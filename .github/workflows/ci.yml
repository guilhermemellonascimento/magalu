name: CI

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  rubocop:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2.2'

      - name: Install dependencies
        run: |
          gem install bundler
          bundle install

      - name: Run RuboCop
        run: bundle exec rubocop
        continue-on-error: false  

  test:
    runs-on: ubuntu-latest
    needs: rubocop
    steps:
      - name: Install packages
        run: sudo apt-get update && sudo apt-get install --no-install-recommends -y google-chrome-stable curl libjemalloc2 libvips sqlite3

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Install dependencies
        run: |
          gem install bundler
          bundle install --jobs 4 --retry 3

      - name: Set up database
        run: |
          bundle exec rake db:create
          bundle exec rake db:migrate

      - name: Run RSpec tests
        run: |
          bundle exec rspec

      - name: Check SimpleCov Coverage
        run: |
          # Install jq (a lightweight and flexible command-line JSON processor)
          sudo apt-get install jq

          # Read the coverage percentage from the generated JSON file
          COVERAGE=$(cat coverage/coverage.json | jq '.covered_percent')
          echo "Code coverage: $COVERAGE%"

          # Fail the job if coverage is not 100%
          if [ "$COVERAGE" -ne 100 ]; then
            echo "Coverage is not 100%. Failing the build."
            exit 1
          fi

  deploy:
      runs-on: ubuntu-latest
      needs: [rubocop, test]
      if: success() 
      steps:
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Set up Docker
          uses: docker/setup-buildx-action@v2

        - name: Log in to Docker Hub
          run: |
            echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

        - name: Build Docker image
          run: |
            docker build -t ${{ secrets.DOCKER_IMAGE }} .

        - name: Push Docker image to Docker Hub
          run: |
            docker push ${{ secrets.DOCKER_IMAGE }}

        - name: Deploy to AWS Lightsail
          uses: fifsky/ssh-action@master
          with:
            command: |
              docker pull ${{ secrets.DOCKER_IMAGE }}:latest
              docker ps -a --format '{{.Names}}' | grep -q rails-app && docker stop rails-app && docker rm rails-app
              
              docker stop redis || true
              docker rm redis || true

              docker run -d --name redis -p 6379:6379 redis:alpine
              docker run -d --name rails-app -p 80:3000 --link redis:redis ${{ secrets.DOCKER_IMAGE }}:latest
            host: ${{ secrets.LIGHTSAIL_IP }}
            user: ${{ secrets.LIGHTSAIL_USER }}
            key: ${{ secrets.PRIVATE_KEY}}